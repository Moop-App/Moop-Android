import java.util.regex.Pattern

class Const {
    static final VERSION_FILE = "version.properties"
    static final KEY_VERSION_CODE = "versionCode"
    static final KEY_VERSION_NAME = "versionName"

    // 00.00.00 or 00.00.00.00 only
    static final VERSION_REGEX = "^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:\\.([0-9]+))?\$"
    static final VERSION_INTERVAL = 100 // 2 digits each (= 00.00.00.00)
}

class VersionInfo {
    final int major
    final int minor
    final int patch
    final int build

    VersionInfo(int major, int minor, int patch, int build) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.build = build
    }

    int getVersionCode() {
        final int interval = Const.VERSION_INTERVAL
        final int BASE_MAJOR = Math.pow(interval, 3)
        final int BASE_MINOR = Math.pow(interval, 2)
        final int BASE_PATCH = Math.pow(interval, 1)
        final int BASE_BUILD = Math.pow(interval, 0)
        return BASE_MAJOR * major +
                BASE_MINOR * minor +
                BASE_PATCH * patch +
                BASE_BUILD * build
    }

    String getVersionName() {
        if (build != 0) {
            return "$major.$minor.$patch.$build"
        } else {
            return "$major.$minor.$patch"
        }
    }

    @Override
    String toString() {
        return "VersionInfo(code=${versionCode}, name=\"${versionName}\")"
    }
}

private File getVersionFile() throws Exception {
    def file = rootProject.file(Const.VERSION_FILE)
    if (!file.exists()) {
        throw new IllegalStateException("There is no '${file.name}' file.")
    }
    return file
}

private Properties loadVersionProperties() throws Exception {
    def file = getVersionFile()
    def properties = new Properties()
    properties.load(new FileInputStream(file))
    return properties
}

private void storeVersionProperties(VersionInfo versionInfo) throws Exception {
    def file = getVersionFile()
    def comment = "Generated by gradle tasks in version.gradle file"
    Properties properties = new Properties()
    properties.setProperty(Const.KEY_VERSION_CODE, versionInfo.versionCode.toString())
    properties.setProperty(Const.KEY_VERSION_NAME, versionInfo.versionName)
    properties.store(new FileOutputStream(file), comment)
}

private VersionInfo getVersionInfo(Properties properties = loadVersionProperties()) throws Exception {
    def versionText = properties[Const.KEY_VERSION_NAME]
    if (!versionText.matches(Pattern.compile(Const.VERSION_REGEX))) {
        throw new IllegalStateException("Invalid version(${versionText}) in '${file.name}' file.")
    }

    def versions = versionText.split('\\.').toList()
    if (versions.size() < 3 || versions.size() > 4) {
        throw new IllegalStateException("Invalid version(${versionText}) in '${file.name}' file.")
    }

    def majorStr = versions.get(0)
    def minorStr = versions.get(1)
    def patchStr = versions.get(2)
    def buildStr
    if (versions.size() == 4) {
        buildStr = versions.get(3)
    } else {
        buildStr = "0"
    }
    if (!(majorStr.isInteger() && minorStr.isInteger() && patchStr.isInteger() && buildStr.isInteger())) {
        throw new IllegalStateException("Invalid version(${versionText}) in '${file.name}' file.")
    }

    def major = majorStr.toInteger()
    def minor = minorStr.toInteger()
    def patch = patchStr.toInteger()
    def build = buildStr.toInteger()
    def interval = Const.VERSION_INTERVAL
    if ((major == 0 && minor == 0 && patch == 0 && build == 0)
            || !(0 <= major && major < interval)
            || !(0 <= minor && minor < interval)
            || !(0 <= patch && patch < interval)
            || !(0 <= build && build < interval)
    ) {
        throw new IllegalStateException("Invalid version(${versionText}) in '${file.name}' file.")
    }

    return new VersionInfo(major, minor, patch, build)
}

ext {
    def properties = loadVersionProperties()
    String code = properties[Const.KEY_VERSION_CODE]
    String name = properties[Const.KEY_VERSION_NAME]
    println "current: code=${code}, name=${name}"

    if (code.isInteger()) {
        versionCode = code.toInteger()
        versionName = name.toString()
    } else {
        throw IllegalStateException("""
Invalid type of versionCode in file '${Const.VERSION_FILE}'.
If this is intentional, re-baseline using ./gradlew versionGuardBaseline
""")
    }
}

task versionGuard {
    doLast {
        Properties properties = loadVersionProperties()
        def expected = getVersionInfo(properties)
        println "expected: ${expected}"

        def actualVersionCode = properties[Const.KEY_VERSION_CODE]
        if (actualVersionCode != expected.versionCode.toString()) {
            throw new IllegalStateException("""
Wrong versionCode in '${Const.VERSION_FILE}' file.
  expected: <${expected.versionCode}>
  actual:   <${actualVersionCode}> 

App Version comparison to baseline does not match.
If this is intentional, re-baseline using ./gradlew versionGuardBaseline
""")
        }
    }
}

task versionGuardBaseline {
    doLast {
        def current = getVersionInfo()
        println "current: ${current}"

        storeVersionProperties(current)
    }
}

task incrementMajorVersion {
    doLast {
        def current = getVersionInfo()
        def increment = new VersionInfo(current.major + 1, 0, 0, 0)
        println "incrementMajorVersion:\n - $current\n + $increment"

        storeVersionProperties(increment)
    }
}

task incrementMinorVersion {
    doLast {
        def current = getVersionInfo()
        def increment = new VersionInfo(current.major, current.minor + 1, 0, 0)
        println "incrementMinorVersion:\n - $current\n + $increment"

        storeVersionProperties(increment)
    }
}

task incrementPatchVersion {
    doLast {
        def current = getVersionInfo()
        def increment = new VersionInfo(current.major, current.minor, current.patch + 1, 0)
        println "incrementPatchVersion:\n - $current\n + $increment"

        storeVersionProperties(increment)
    }
}

task incrementBuildVersion {
    doLast {
        def current = getVersionInfo()
        def increment = new VersionInfo(current.major, current.minor, current.patch, current.build + 1)
        println "incrementBuildVersion:\n - $current\n + $increment"

        storeVersionProperties(increment)
    }
}
