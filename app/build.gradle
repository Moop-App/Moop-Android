apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
}
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.dropbox.dependency-guard'

def useReleaseKeystore = rootProject.file("signing/app-release.jks").exists()

android {
    namespace "soup.movie"
    compileSdk buildConfig.compileSdk
    defaultConfig {
        minSdk buildConfig.minSdk
        targetSdk buildConfig.targetSdk
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "${libs.versions.composeCompiler.get()}"
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("signing/app-release.jks")
                storePassword propOrDef('storePassword', "")
                keyAlias propOrDef('keyAlias', "")
                keyPassword propOrDef('keyPassword', "")
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            def filesAuthorityValue = 'soup.movie.debug.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: false
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "Boolean.parseBoolean(\"${project.hasProperty("useFakeSplit")}\")")
        }
        benchmark {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            matchingFallbacks = ['release']
            debuggable false

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lint {
        checkReleaseBuilds false
    }
    dynamicFeatures = [":feature:theatermap"]
}

dependencies {
    implementation project(':feature:home')
    implementation project(':feature:detail')
    implementation project(':feature:search')
    implementation project(':feature:theater')
    implementation project(':feature:settings')
    implementation project(':feature:theme')
    implementation project(':feature:work')
    implementation project(':core')
    implementation project(':data:repository')
    implementation project(':data:db')
    implementation project(':data:api')

    implementation libs.kotlin.stdlib
    implementation libs.kotlin.serialization

    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment
    implementation libs.androidx.startup

    implementation libs.google.play

    implementation libs.androidx.lifecycle.livedata
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.compiler

    implementation libs.androidx.navigation.compose
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.navigation.dynamicFeaturesFragment

    implementation libs.androidx.work.runtime

    implementation libs.androidx.datastore.preferences

    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.compiler
    implementation libs.androidx.hilt.work
    kapt libs.androidx.hilt.compiler

    implementation libs.coil.runtime

    implementation platform(libs.firebase.bom)
    implementation firebase.analytics
    implementation firebase.config
    implementation firebase.crashlytics
    implementation firebase.messaging
    implementation firebase.dynamicLinks
    implementation firebase.perf
    implementation libs.google.ads

    implementation libs.androidx.activity.compose
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.compose.foundation
    implementation libs.compose.material
    implementation libs.compose.ui
    implementation libs.accompanist.drawablepainter
    implementation libs.metronome.visibility
    implementation libs.lottie.compose

    implementation libs.androidx.profileinstaller

    implementation libs.kakaoLink

    testImplementation libs.test.junit
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.espresso
}

dependencyGuard {
    // All dependencies included in Production Release APK
    configuration("releaseRuntimeClasspath")
}
