apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.firebase.crashlytics'

def useReleaseKeystore = rootProject.file("signing/app-release.jks").exists()

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId build_versions.appId
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding = true
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("signing/app-release.jks")
                storePassword propOrDef('storePassword', "")
                keyAlias propOrDef('keyAlias', "")
                keyPassword propOrDef('keyPassword', "")
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            def filesAuthorityValue = 'soup.movie.debug.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: false
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "Boolean.parseBoolean(\"${project.hasProperty("useFakeSplit")}\")")
        }
        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dynamicFeatures = [
            ":feature:theatermap"
    ]
}

dependencies {
    implementation project(':feature:home')
    implementation project(':feature:detail')
    implementation project(':feature:search')
    implementation project(':feature:theater')
    implementation project(':feature:settings')
    implementation project(':feature:theme')
    implementation project(':feature:work')
    implementation project(':feature:system')
    implementation project(':core')
    implementation project(':data:repository')
    implementation project(':data:db')
    implementation project(':data:api')

    implementation deps.kotlin.stdlib
    implementation deps.kotlin.serialization

    implementation deps.androidx.activity_ktx
    implementation deps.androidx.appcompat
    implementation deps.androidx.core_ktx
    implementation deps.androidx.constraintlayout
    implementation deps.androidx.drawerlayout
    implementation deps.androidx.fragment_ktx
    implementation deps.androidx.preference_ktx
    implementation deps.androidx.recyclerview
    implementation deps.androidx.startup
    implementation deps.androidx.transition
    implementation deps.androidx.viewpager2

    implementation deps.google.gson
    implementation deps.google.material
    implementation deps.google.play_core

    implementation deps.insetter.ktx

    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.viewmodel_ktx
    implementation deps.lifecycle.runtime_ktx
    implementation deps.lifecycle.compiler

    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx
    implementation deps.navigation.dynamic_features_fragment

    implementation deps.dagger.hilt
    kapt deps.dagger.hilt_compiler
    implementation deps.hilt.viewmodel
    implementation deps.hilt.work
    kapt deps.hilt.compiler

    implementation deps.glide.runtime
    kapt deps.glide.compiler

    implementation deps.firebase.core
    implementation deps.firebase.crashlytics
    implementation deps.firebase.messaging
    implementation deps.firebase.dynamic_links
    implementation deps.firebase.ads

    implementation deps.util.timber

    implementation deps.ui.lottie

    testImplementation deps.test.junit
    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.espresso
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
}
