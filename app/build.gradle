import dependencies.Libs
import dependencies.Versions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.firebase.crashlytics'

def useReleaseKeystore = rootProject.file("signing/app-release.jks").exists()

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        applicationId Versions.appId
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding = true
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("signing/app-release.jks")
                storePassword propOrDef('storePassword', "")
                keyAlias propOrDef('keyAlias', "")
                keyPassword propOrDef('keyPassword', "")
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            def filesAuthorityValue = 'soup.movie.debug.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: false
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "Boolean.parseBoolean(\"${project.hasProperty("useFakeSplit")}\")")
        }
        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dynamicFeatures = [":feature:theatermap"]
}

dependencies {
    implementation project(':feature:home')
    implementation project(':feature:detail')
    implementation project(':feature:search')
    implementation project(':feature:theater')
    implementation project(':feature:settings')
    implementation project(':feature:theme')
    implementation project(':feature:work')
    implementation project(':feature:system')
    implementation project(':core')
    implementation project(':data:repository')
    implementation project(':data:db')
    implementation project(':data:api')

    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.serialization

    implementation Libs.AndroidX.activity
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.core
    implementation Libs.AndroidX.constraintlayout
    implementation Libs.AndroidX.drawerlayout
    implementation Libs.AndroidX.fragment
    implementation Libs.AndroidX.preference
    implementation Libs.AndroidX.recyclerview
    implementation Libs.AndroidX.startup
    implementation Libs.AndroidX.transition
    implementation Libs.AndroidX.viewpager2

    implementation Libs.Google.material
    implementation Libs.Google.play

    implementation Libs.insetter

    implementation Libs.AndroidX.Lifecycle.livedata
    implementation Libs.AndroidX.Lifecycle.viewmodel
    implementation Libs.AndroidX.Lifecycle.runtime
    implementation Libs.AndroidX.Lifecycle.compiler

    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.ui
    implementation Libs.AndroidX.Navigation.dynamicFeaturesFragment

    implementation Libs.Dagger.hilt
    kapt Libs.Dagger.hiltCompiler
    implementation Libs.AndroidX.Hilt.work
    kapt Libs.AndroidX.Hilt.compiler

    implementation Libs.Glide.runtime
    kapt Libs.Glide.compiler

    implementation platform(Libs.Firebase.bom)
    implementation Libs.Firebase.analytics
    implementation Libs.Firebase.crashlytics
    implementation Libs.Firebase.messaging
    implementation Libs.Firebase.dynamicLinks
    implementation Libs.Firebase.ads

    implementation Libs.timber
    implementation Libs.lottie

    testImplementation Libs.Test.junit
    androidTestImplementation Libs.Test.runner
    androidTestImplementation Libs.Test.espresso
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
}
