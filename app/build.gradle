plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.kapt"
    id "dagger.hilt.android.plugin"
    id "androidx.navigation.safeargs.kotlin"
}
if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
}
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.dropbox.dependency-guard'

def useReleaseKeystore = rootProject.file("signing/app-release.jks").exists()

android {
    namespace "soup.movie"
    compileSdk buildConfig.compileSdk
    defaultConfig {
        minSdk buildConfig.minSdk
        targetSdk buildConfig.targetSdk
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "${libs.versions.composeCompiler.get()}"
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("signing/app-release.jks")
                storePassword propOrDef('storePassword', "")
                keyAlias propOrDef('keyAlias', "")
                keyPassword propOrDef('keyPassword', "")
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            def filesAuthorityValue = 'soup.movie.debug.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: false
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "Boolean.parseBoolean(\"${project.hasProperty("useFakeSplit")}\")")
        }
        benchmark {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            matchingFallbacks = ['release']
            debuggable false

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-rules-navigation.pro'

            def filesAuthorityValue = 'soup.movie.shareprovider'
            buildConfigField 'String', 'FILES_AUTHORITY', "\"${filesAuthorityValue}\""
            manifestPlaceholders = [
                    filesAuthority     : filesAuthorityValue,
                    crashlytics_enabled: true
            ]
            buildConfigField("boolean", "USE_FAKE_SPLIT", "false")
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lint {
        checkReleaseBuilds false
    }
    dynamicFeatures = [":theatermap"]
}

dependencies {
    implementation project(":core-ads")
    implementation project(":feature-home")
    implementation project(":feature-detail")
    implementation project(":feature-search")
    implementation project(":feature-theater")
    implementation project(":feature-settings")
    implementation project(":feature-theme")
    implementation project(":feature-work")
    implementation project(":feature-common")
    runtimeOnly project(":data-network-impl")
    runtimeOnly project(":data-database-impl")
    runtimeOnly project(":data-repository-impl")
    runtimeOnly project(":data-settings-impl")

    implementation libs.kotlin.stdlib

    implementation libs.androidx.appcompat
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment
    implementation libs.androidx.startup

    implementation libs.google.play.featureDelivery
    implementation libs.google.play.appUpdate

    implementation libs.androidx.lifecycle.livedata
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.compiler

    implementation libs.androidx.navigation.compose
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.navigation.dynamicFeaturesFragment

    implementation libs.androidx.work.runtime

    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.compiler
    implementation libs.androidx.hilt.work
    kapt libs.androidx.hilt.compiler

    implementation libs.coil.runtime

    implementation platform(libs.firebase.bom)
    implementation firebase.analytics
    implementation firebase.config
    implementation firebase.crashlytics
    implementation firebase.messaging
    implementation firebase.dynamicLinks
    implementation firebase.perf

    implementation libs.androidx.activity.compose
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.compose.foundation
    implementation libs.compose.material
    implementation libs.compose.ui
    implementation libs.compose.runtimeLivedata
    implementation libs.accompanist.drawablepainter
    implementation libs.metronome.visibility

    implementation libs.androidx.profileinstaller

    implementation libs.kakaoLink

    testImplementation project(":testing")
    androidTestImplementation project(":testing")
}

dependencyGuard {
    // All dependencies included in Production Release APK
    configuration("releaseRuntimeClasspath")
}

task buildNavigationProguard {
    def navigationGraphXml = project.file("src/main/res/navigation/nav_graph.xml")
    def proguardRules= project.file("proguard-rules-navigation.pro")
    doLast {

        // XmlParser didn't work so let me use the dirty hack
        if (!navigationGraphXml.text.contains("xmlns:app=\"http://schemas.android.com/apk/res-auto\"")) {
            throw new GradleScriptException("the namespace has been changed from app")
        }

        def fqdns = []

        navigationGraphXml.eachLine {
            def line = it.trim()

            if (line.startsWith("android:name=\"")) {
                def className = line.substring("android:name=\"".length(), line.lastIndexOf("\""))

                if (className.contains(".")) {
                    fqdns << className
                }
            } else if (line.startsWith("app:argType=\"")) {
                def className = line.substring("app:argType=\"".length(), line.lastIndexOf("\""))

                if (className.contains(".")) {
                    fqdns << className
                }
            }
        }

        proguardRules.write(fqdns.sort().collect {
            "-keepnames class $it"
        }.join("\n"))
    }
}

preBuild.dependsOn(buildNavigationProguard)
