apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply from: rootProject.file('gradle/android.gradle')

android {
    namespace "soup.movie.core"
    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules-navigation.pro'
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "${libs.versions.compose.get()}"
    }
}

dependencies {
    implementation project(':model')

    api libs.kotlin.stdlib
    api libs.coroutines.core
    api libs.coroutines.android

    api libs.androidx.appcompat
    api libs.androidx.core
    api libs.material.material

    implementation libs.compose.material
    api libs.compose.materialIconsExtended
    implementation libs.compose.ui

    implementation libs.androidx.browser
    implementation libs.androidx.fragment
    implementation libs.androidx.startup

    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.compiler

    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.dynamicFeaturesFragment

    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.compiler

    implementation libs.coil.runtime

    implementation platform(libs.firebase.bom)
    implementation firebase.dynamicLinks
    implementation libs.google.ads

    api libs.threetenAbp
    api libs.timber
    implementation libs.kakaoLink

    testImplementation libs.test.junit
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.espresso
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = [
                '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                '-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi'
        ]
    }
}

task buildNavigationProguard doLast {
    def navigationGraphXml = project.file("src/main/res/navigation/nav_graph.xml")

    // XmlParser didn't work so let me use the dirty hack
    if (!navigationGraphXml.text.contains("xmlns:app=\"http://schemas.android.com/apk/res-auto\"")) {
        throw new GradleScriptException("the namespace has been changed from app")
    }

    def fqdns = []

    navigationGraphXml.eachLine {
        def line = it.trim()

        if (line.startsWith("android:name=\"")) {
            def className = line.substring("android:name=\"".length(), line.lastIndexOf("\""))

            if (className.contains(".")) {
                fqdns << className
            }
        } else if (line.startsWith("app:argType=\"")) {
            def className = line.substring("app:argType=\"".length(), line.lastIndexOf("\""))

            if (className.contains(".")) {
                fqdns << className
            }
        }
    }

    project.file("proguard-rules-navigation.pro").write(fqdns.sort().collect {
        "-keepnames class $it"
    }.join("\n"))
}

preBuild.dependsOn(buildNavigationProguard)
