buildscript {
    ext.buildConfig = [
            'appId'      : "soup.movie",
            'minSdk'     : 23,
            'targetSdk'  : 31,
            'compileSdk' : 31,
            'versionCode': 106,
            'versionName': "1.0.6",
    ]
    ext.firebase = [
            'analytics'   : "com.google.firebase:firebase-analytics-ktx",
            'config'      : "com.google.firebase:firebase-config-ktx",
            'crashlytics' : "com.google.firebase:firebase-crashlytics-ktx",
            'dynamicLinks': "com.google.firebase:firebase-dynamic-links-ktx",
            'messaging'   : "com.google.firebase:firebase-messaging-ktx",
            'perf'        : "com.google.firebase:firebase-perf-ktx",
    ]
    repositories {
        google()
        mavenCentral()

        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath libs.android.pluginGradle
        classpath libs.kotlin.pluginGradle
        classpath libs.kotlin.serializationPluginGradle
        classpath libs.dagger.hilt.pluginGradle
        classpath libs.androidx.navigation.safeArgsPluginGradle
        classpath libs.google.pluginGradle
        classpath libs.firebase.crashlytics.pluginGradle
        classpath libs.firebase.perf.pluginGradle
        classpath libs.dependencyGuard.pluginGradle
    }
}

plugins {
    id 'com.diffplug.spotless' version '5.12.4'
    id "com.google.devtools.ksp" version "1.6.10-1.0.2"
    alias(libs.plugins.dependencyGuard)
}

Plugin.metaClass.isAndroidApp = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.AppPlugin" }
Plugin.metaClass.isDynamicFeature = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.DynamicFeaturePlugin" }
Plugin.metaClass.isAndroidLibrary = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.LibraryPlugin" }

allprojects {
    repositories {
        google()
        mavenCentral()

        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com/' }
        maven { url 'https://devrepo.kakao.com/nexus/content/groups/public/' }
        maven { url 'https://naver.jfrog.io/artifactory/maven/' }
    }
    plugins.whenPluginAdded {
        if (it.isAndroidApp() || it.isAndroidLibrary() || it.isDynamicFeature()) {
            android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint("0.41.0")
            licenseHeaderFile rootProject.file('spotless/copyright.kt')
        }
    }
    afterEvaluate {
        tasks.find {
            it.name.contains("preBuild")
        }.each {
            it.dependsOn spotlessApply
        }
    }
}

dependencyGuard {
    configuration("classpath")
}

Object propOrDef(String propertyName, Object defaultValue) {
    def properties = new Properties()
    def keyFile = rootProject.file("signing/key.properties")
    if (keyFile.exists()) {
        keyFile.withInputStream { stream -> properties.load(stream) }
    }
    def propertyValue = properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}
